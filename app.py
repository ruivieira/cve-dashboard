import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from parser import Parser
import pandas as pd
import plotly.graph_objs as go
import random
import math
from pandas.tseries.offsets import *

app = dash.Dash(__name__)

prods = ['eap', 'fuse', 'bpm']
parser = Parser(products=prods)

def group_by_severity(df):
    return df.groupby(['product', 'severity'])['severity'].count()

def get_severity_table(df):
    ss = df.reset_index(name="count").pivot_table(index='product', columns='severity', values='count', aggfunc='first')
    ss = ss.reset_index(level=['product'])
    return list(ss.T.to_dict().values())

def group_by_date(df):
    weekly = df
    weekly['week'] = weekly['public_date'] + Week(weekday=4)
    return weekly.groupby(['product', 'week'])['week'] \
        .count() \
        .reset_index(name='count') \
        .sort_values(by=['week'])

severity = group_by_severity(parser.get_df())
count_date = group_by_date(parser.get_df())
print(severity)

category_selector = html.Div([
        dcc.Dropdown(
            id='product',
            options=[{'label': i, 'value': i} for i in prods],
            value=prods[0]),
        dcc.Checklist(
            id='impact_checklist',
            options=[{'label': severity, 'value': severity} for severity in parser.get_df().severity.unique()],
            value=parser.get_df().severity.unique()),
        dcc.Dropdown(
            id='week',
            options=[{'label': f"2019-{i}", 'value': f"2019-{i}"} for i in range(30)],
            value="2019-22")
    ], 
    style={'width': '49%', 'display': 'inline-block'})

def generate_categories_graph(df, product = None):
    data = []
    if product: # we have specified a product
            data = [
                {'x': df[product].index, 'y': df[product].values, 'type': 'bar', 'name': product}]
    else: # we have *not* specified a product
        data = []
        for prod in prods:
            data.append({'x': df[prod].index, 'y': df[prod].values, 'type': 'bar', 'name': prod})
    
    graph = dcc.Graph(
        id='category_graph',
        figure={
            'data': data,
            'layout': {
                'title': 'CVEs by severity'}
        })
    return graph

def generate_score_histogram(df, product = None):
    data = []
    if product: # we have specified a product
        data = [{   'x': df[df['product']==product]['score'],
                    'name': product,
                    'type': 'histogram'}]
    else: # we have *not* specified a product
        data = [{
                'x': df[df['product']==prod]['score'],
                'name': prod,
                'type': 'histogram'
                } for prod in prods]

    return dcc.Graph(
            id='basic-interactions',
            figure={
                'data': data,
                'layout': { 'title': 'Score distribution' }
            })

def generate_categories_series(df, product=None):
    data = []
    if product: # we have specified a product
        data = [go.Scatter(
                    x=df[df['product'] == product]['week'],
                    y=df[df['product'] == product]['count'],
                    mode='markers',
                    opacity=0.7,
                    marker={
                        'size': 15,
                        'line': {'width': 0.5, 'color': 'white'}
                    },
                    name=product)]
    else: # we have *not* specified a product
        data = [go.Scatter(
            x=df[df['product'] == prod]['week'],
            y=df[df['product'] == prod]['count'],
            mode='markers',
            opacity=0.7,
            marker={
                'size': 15,
                'line': {'width': 0.5, 'color': 'white'}
            },
            name=prod
        ) for prod in prods]
    return dcc.Graph(
        id='category-time-series',
        figure={
            'data': data,
            'layout': go.Layout(
                xaxis={'title': 'Number of CVEs'},
                yaxis={'title': 'Week'},
                margin={'l': 40, 'b': 40, 't': 10, 'r': 10},
                hovermode='closest'
            )
        }
    )

category_table = dash_table.DataTable(
    id='table-graph',
    columns=[{'name': i, 'id': i} for i in ["product", "critical", "important", "moderate", "low"]],
    data=get_severity_table(severity))


print(parser.get_df()['score'])



app.layout = html.Div(children=[
    html.H1(children='CVE Report'),
    html.Div(children='''
            Select products and timeline.
        '''),
    html.Div([
        category_selector,
        html.Div(id='category_graph_id', children=[generate_categories_graph(severity, "eap")]),
        category_table,
        html.Div(id='category_time_series_id', children=[generate_categories_series(count_date, product="eap")]),
        html.Div(id='score_histograms_id', children=[generate_score_histogram(parser.get_df(), "eap")])
    ])
])

@app.callback(
    dash.dependencies.Output('category_graph_id', 'children'),
    [dash.dependencies.Input('product', 'value'),
     dash.dependencies.Input('impact_checklist', 'value')])
def update_graph(product_value, impact_checklist):
    print("product_value = {}".format(product_value))
    print(impact_checklist)
    return [generate_categories_graph(severity, product_value)]

@app.callback(
    dash.dependencies.Output('score_histograms_id', 'children'),
    [dash.dependencies.Input('product', 'value')])
def update_histogram(product_value):
    print("product_value = {}".format(product_value))
    return [generate_score_histogram(parser.get_df(), product_value)]

@app.callback(
    dash.dependencies.Output('category_time_series_id', 'children'),
    [dash.dependencies.Input('product', 'value')])
def update_time_series(product_value):
    print("product_value = {}".format(product_value))
    return [generate_categories_series(count_date, product_value)]


if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=8050, debug=True)
