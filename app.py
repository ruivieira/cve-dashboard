import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from parser import Parser
import pandas as pd
import plotly.graph_objs as go
import random
import math
from pandas.tseries.offsets import *

app = dash.Dash(__name__)

prods = ['eap', 'fuse', 'bpm']
parser = Parser(products=prods)

def group_by_severity(df):
    return df.groupby(['product', 'severity'])['severity'].count()

def get_severity_table(df):
    ss = df.reset_index(name="count").pivot_table(index='product', columns='severity', values='count', aggfunc='first')
    ss = ss.reset_index(level=['product'])
    return list(ss.T.to_dict().values())

def group_by_date(df):
    weekly = df
    weekly['week'] = weekly['public_date'] + Week(weekday=4)
    return weekly.groupby(['product', 'week'])['week'] \
        .count() \
        .reset_index(name='count') \
        .sort_values(by=['week'])

severity = group_by_severity(parser.get_df())
count_date = group_by_date(parser.get_df())
print(severity)

category_selector = html.Div([
        dcc.Dropdown(
            id='product',
            options=[{'label': i, 'value': i} for i in prods],
            value=prods[0]),
        dcc.Checklist(
            id='impact_checklist',
            options=[{'label': severity, 'value': severity} for severity in parser.get_df().severity.unique()],
            value=parser.get_df().severity.unique()),
        dcc.Dropdown(
            id='week',
            options=[{'label': f"2019-{i}", 'value': f"2019-{i}"} for i in range(30)],
            value="2019-22")
    ], 
    style={'width': '49%', 'display': 'inline-block'})

category_graph = dcc.Graph(
    id='example-graph',
    figure={
        'data': [
            {'x': severity[prod].index, 'y': severity[prod].values, 'type': 'bar', 'name': prod}
            for prod in prods],
        'layout': {
            'title': 'CVEs by severity'}})

category_time_series_graph = dcc.Graph(
        id='category-time-series',
        figure={
            'data': [
                go.Scatter(
                    x=count_date[count_date['product'] == prod]['week'],
                    y=count_date[count_date['product'] == prod]['count'],
                    # text=df[df['continent'] == i]['country'],
                    mode='markers',
                    opacity=0.7,
                    marker={
                        'size': 15,
                        'line': {'width': 0.5, 'color': 'white'}
                    },
                    name=prod
                ) for prod in prods
            ],
            'layout': go.Layout(
                xaxis={'title': 'Number of CVEs'},
                yaxis={'title': 'Week'},
                margin={'l': 40, 'b': 40, 't': 10, 'r': 10},
                # legend={'x': 0, 'y': 1},
                hovermode='closest'
            )
        }
    )

category_table = dash_table.DataTable(
    id='table-graph',
    columns=[{'name': i, 'id': i} for i in ["product", "critical", "important", "moderate", "low"]],
    data=get_severity_table(severity))

app.layout = html.Div(children=[
    html.H1(children='CVE Report'),
    html.Div(children='''
            Select products and timeline.
        '''),
    html.Div([
        category_selector,
        category_graph,
        category_table,
        category_time_series_graph
    ])
])

@app.callback(
    dash.dependencies.Output('example-graph', 'figure'),
    [dash.dependencies.Input('product', 'value'),
     dash.dependencies.Input('impact_checklist', 'value')])
def update_graph(product_value, impact_checklist):
    print(product_value)
    print(impact_checklist)
    d = severity
    if product_value:
        data = [
            {'x': d[product_value].index, 'y': d[product_value].values, 'type': 'bar', 'name': product_value}]
    else:
        data = []
        for prod in prods:
            data.append({'x': d[prod].index, 'y': d[prod].values, 'type': 'bar', 'name': prod})
    return {'data': data,
            'layout': {
                'title': 'CVEs by severity'
            }
            }


if __name__ == '__main__':
    app.run_server(host='0.0.0.0', port=8050, debug=True)
