import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
from parser import Parser
import pandas as pd
import plotly.graph_objs as go
import random
import math

app = dash.Dash(__name__)

prods = ['eap', 'fuse', 'bpm']
parser = Parser(products=prods)

def group_by_severity(df):
    return df.groupby(['product', 'severity'])['severity'].count()

def get_severity_table(df):
    ss = df.reset_index(name="count").pivot_table(index='product', columns='severity', values='count', aggfunc='first')
    ss = ss.reset_index(level=['product'])
    return list(ss.T.to_dict().values())


severity = group_by_severity(parser.get_df())
print(severity)

app.layout = html.Div(children=[
    html.H1(children='CVE Report'),
    html.Div(children='''
            Select products and timeline.
        '''),
    html.Div([

        html.Div([
            dcc.Dropdown(
                id='product',
                options=[{'label': i, 'value': i} for i in prods],
                value=prods[0]),
            dcc.Checklist(
                id='impact_checklist',
                options=[{'label': severity, 'value': severity} for severity in parser.get_df().severity.unique()],
                values=parser.get_df().severity.unique()),
            dcc.Dropdown(
                id='week',
                options=[{'label': f"2019-{i}", 'value': f"2019-{i}"} for i in range(30)],
                value="2019-22")
        ],
            style={'width': '49%', 'display': 'inline-block'})]),
    dcc.Graph(
        id='example-graph',
        figure={
            'data': [
                {'x': severity[prod].index, 'y': severity[prod].values, 'type': 'bar', 'name': prod}
                for prod in prods],
            'layout': {
                'title': 'CVEs by severity'
            }
        }
    ),
    dash_table.DataTable(
        id='table-graph',
        columns=[{'name': i, 'id': i} for i in ["product", "critical", "important", "moderate", "low"]],
        data=get_severity_table(severity),
    ),
])


@app.callback(
    dash.dependencies.Output('example-graph', 'figure'),
    [dash.dependencies.Input('product', 'value'),
     dash.dependencies.Input('impact_checklist', 'values')])
def update_graph(product_value, impact_checklist):
    print(product_value)
    print(impact_checklist)
    d = severity
    if product_value:
        data = [
            {'x': d[product_value].index, 'y': d[product_value].values, 'type': 'bar', 'name': product_value}]
    else:
        data = []
        for prod in prods:
            data.append({'x': d[prod].index, 'y': d[prod].values, 'type': 'bar', 'name': prod})
    return {'data': data,
            'layout': {
                'title': 'CVEs by severity'
            }
            }


if __name__ == '__main__':
    app.run_server(debug=True)
