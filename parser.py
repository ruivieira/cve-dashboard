import json
from pandas.io.json import json_normalize
import pandas as pd
from datetime import datetime
from urllib.request import urlopen
import json
import urllib.parse

BASE = "https://access.redhat.com/hydra/rest/securitydata/"

def get_json(url):
    response = urlopen(url)
    data = response.read().decode("utf-8")
    return json.loads(data)


class Parser:
    def __init__(self, products):
        cves = []
        for prod in products:
            json = self._get_cves(prod, '2018-01-01')
            for row in json:
                row['product'] = prod
            for i in range(len(json)):
                json[i]['public_date'] = datetime.strptime(json[i]['public_date'], "%Y-%m-%dT%H:%M:%SZ")
            cves.extend(json)
        self.df = pd.DataFrame(cves)

    def _get_cves(self, product, after):
        """
        Return a JSON object with the CVEs for product `product`
        """
        URL = urllib.parse.urljoin(BASE, f"cve.json?product={product}&after={after}")
        print(URL)
        return get_json(URL)

    def get_df(self):
        return self.df


def _parse(data):
    """Converts raw JSON data to a Pandas dataframe
    """
    return json_normalize(data)


def _read_json(path: str):
    # parse the CVE JSON files
    with open(path) as f:
        data = json.load(f)
        return _parse(data)


def week_number(value):
    """
    Returns the `year-week` for a certain `date`
    :param value: a `date`
    :return: A string with `year-week`
    """
    if value is not pd.NaT:
        d = value.date()
        year, week, weekday = d.isocalendar()
        return f"{year}-{week}"
    else:
        return ""


def get_todays_week():
    d = datetime.datetime.now().date().isocalendar()
    return f"{d[0]}-{d[1]}"


def to_date(value):
    return datetime.datetime.strptime(value + '-1', "%Y-%W-%w")


if __name__ == "__main__":
    p = Parser()
    df = p.get_df()
    